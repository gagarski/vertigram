<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>ski.gagar.vertigram</groupId>
        <artifactId>vertigram-bom</artifactId>
        <version>1.0.0-alpha41-SNAPSHOT</version>
        <relativePath>../vertigram-bom</relativePath>
    </parent>


    <artifactId>vertigram-parent</artifactId>
    <packaging>pom</packaging>

    <properties>
        <properties-plugin.version>1.0.0</properties-plugin.version>
        <spring-boot-maven-plugin.plugin.version>3.2.0</spring-boot-maven-plugin.plugin.version>

        <groovy-plugin.version>2.1.1</groovy-plugin.version>

        <args4j.version>2.33</args4j.version>
        <guava.version>33.0.0-jre</guava.version>
        <janino.version>3.1.11</janino.version>
        <testcontainers.version>1.19.4</testcontainers.version>

        <testcontainers.version>1.19.4</testcontainers.version>
        <vertigram.jooq.codegen.db.name>vertigram</vertigram.jooq.codegen.db.name>
        <vertigram.jooq.codegen.db.schema>public</vertigram.jooq.codegen.db.schema>
        <vertigram.jooq.codegen.db.user>vertigram</vertigram.jooq.codegen.db.user>
        <vertigram.jooq.codegen.db.password>vertigram</vertigram.jooq.codegen.db.password>
        <vertigram.jooq.codegen.migrations.path>filesystem:src/main/resources/db/migration</vertigram.jooq.codegen.migrations.path>
        <vertigram.jooq.codegen.package>ski.gagar.vertigram.jooq.db</vertigram.jooq.codegen.package>
        <vertigram.jooq.codegen.output>${project.basedir}/target/generated-sources/jooq</vertigram.jooq.codegen.output>

        <vertigram.jooq.codegen.generator.db.name/>
        <vertigram.jooq.codegen.db.driver/>
        <vertigram.jooq.codegen.db.url/>
        <vertigram.jooq.codegen.container.version>16.1</vertigram.jooq.codegen.container.version>
        <exec.main-class/>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>args4j</groupId>
                <artifactId>args4j</artifactId>
                <version>${args4j.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>janino</artifactId>
                <version>${janino.version}</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-database-postgresql</artifactId>
                <version>${flyway.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <version>${properties-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>initialize</phase>
                            <goals>
                                <goal>read-project-properties</goal>
                            </goals>
                            <configuration>
                                <quiet>true</quiet>
                                <files>
                                    <file>${project.basedir}/db.properties</file>
                                </files>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>groovy-maven-plugin</artifactId>
                    <version>${groovy-plugin.version}</version>
                    <executions>
                        <execution>
                            <!-- Start the container in any phase before the actual code
                                 generation is required, i.e. at the latest in
                                 generate-sources -->
                            <id>prepare-db</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    String explicitDriver = project.properties.getProperty('vertigram.jooq.codegen.db.driver')

                                    String dbDriver

                                    if (explicitDriver != null &amp;&amp; !explicitDriver.isBlank()) {
                                        dbDriver = explicitDriver
                                    } else {
                                        switch ("${vertigram.jooq.codegen}") {
                                            case "postgres":
                                                dbDriver = "org.postgresql.Driver"
                                                break
                                            case "none":
                                                throw new IllegalStateException("Please disable execution of DB related plugins")
                                            default:
                                                throw new IllegalStateException("Database ${vertigram.jooq.codegen} is not supported")
                                        }

                                    }

                                    project.properties.setProperty('vertigram.jooq.codegen.db.driver.post-processed', dbDriver)


                                    String explicitGeneratorDbName = project.properties.getProperty('vertigram.jooq.codegen.generator.db.name')
                                    String generatorDbName

                                    if (explicitGeneratorDbName != null &amp;&amp; !explicitGeneratorDbName.isBlank()) {
                                        generatorDbName = explicitGeneratorDbName
                                    } else {
                                        switch ("${vertigram.jooq.codegen}") {
                                            case "postgres":
                                                generatorDbName = "org.jooq.meta.postgres.PostgresDatabase"
                                                break
                                            case "none":
                                                throw new IllegalStateException("Please disable execution of DB related plugins")
                                            default:
                                                throw new IllegalStateException("Database ${vertigram.jooq.codegen} is not supported")
                                        }
                                    }

                                    project.properties.setProperty('vertigram.jooq.codegen.generator.db.name.post-processed', generatorDbName)


                                    String explicitUrl = project.properties.getProperty('vertigram.jooq.codegen.db.url')
                                    String url
                                    if (explicitUrl != null &amp;&amp; !explicitUrl.isBlank()) {
                                        url = explicitUrl
                                        return
                                    } else {
                                        org.testcontainers.containers.JdbcDatabaseContainer db

                                        switch ("${vertigram.jooq.codegen}") {
                                            case "postgres":
                                                db = new org.testcontainers.containers.PostgreSQLContainer(
                                                        "postgres:${vertigram.jooq.codegen.container.version}")
                                                        .withUsername("${vertigram.jooq.codegen.db.user}")
                                                        .withDatabaseName("${vertigram.jooq.codegen.db.name}")
                                                        .withPassword("${vertigram.jooq.codegen.db.password}")
                                                break
                                            case "none":
                                                throw new IllegalStateException("Please disable execution of DB related plugins")
                                            default:
                                                throw new IllegalStateException("Database ${vertigram.jooq.codegen} is not supported")
                                        }



                                        db.start()
                                        // After you've started the container, collect its generated
                                        // JDBC URL (which contains a random port)
                                        url = db.getJdbcUrl()
                                        project.properties.setProperty('testcontainer.containerid', db.getContainerId())
                                        project.properties.setProperty('testcontainer.imageName', db.getDockerImageName())
                                    }

                                    project.properties.setProperty('vertigram.jooq.codegen.db.url.post-processed', url)
                                </source>
                            </configuration>
                        </execution>
                        <execution>
                            <id>testcontainer-stop</id>
                            <phase>test</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    containerId = project.properties.getProperty('testcontainer.containerid')
                                    imageName = project.properties.getProperty('testcontainer.imageName')

                                    if (containerId == null || imageName == null) {
                                        return
                                    }

                                    org.testcontainers.utility.ResourceReaper
                                            .instance()
                                            .stopAndRemoveContainer(containerId, imageName)
                                </source>
                            </configuration>
                        </execution>
                    </executions>

                    <dependencies>
                        <dependency>
                            <groupId>org.testcontainers</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>${testcontainers.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.flywaydb</groupId>
                    <artifactId>flyway-maven-plugin</artifactId>
                    <version>${flyway.version}</version>
                    <executions>
                        <execution>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>migrate</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <url>${vertigram.jooq.codegen.db.url.post-processed}</url>
                        <user>${vertigram.jooq.codegen.db.user}</user>
                        <password>${vertigram.jooq.codegen.db.password}</password>
                        <locations>
                            <location>${vertigram.jooq.codegen.migrations.path}</location>
                        </locations>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.flywaydb</groupId>
                            <artifactId>flyway-database-postgresql</artifactId>
                            <version>${flyway.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.jooq</groupId>
                    <artifactId>jooq-codegen-maven</artifactId>
                    <version>${jooq.version}</version>
                    <executions>
                        <execution>
                            <id>jooq-codegen</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                            <configuration>
                                <jdbc>
                                    <driver>org.postgresql.Driver</driver>
                                    <url>${vertigram.jooq.codegen.db.url.post-processed}</url>
                                    <user>${vertigram.jooq.codegen.db.user}</user>
                                    <password>${vertigram.jooq.codegen.db.password}</password>
                                </jdbc>
                                <generator>
                                    <database>
                                        <name>${vertigram.jooq.codegen.generator.db.name.post-processed}</name>
                                        <includes>.*</includes>
                                        <excludes />
                                        <inputSchema>${vertigram.jooq.codegen.db.schema}</inputSchema>
                                    </database>
                                    <generate />
                                    <target>
                                        <packageName>${vertigram.jooq.codegen.package}</packageName>
                                        <directory>${vertigram.jooq.codegen.output}</directory>
                                    </target>
                                </generator>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${compiler-plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <testSource>${java.version}</testSource>
                        <testTarget>${java.version}</testTarget>
                    </configuration>
                    <executions>
                        <!-- Replacing default-compile as it is treated specially by maven -->
                        <execution>
                            <id>default-compile</id>
                            <phase>none</phase>
                        </execution>
                        <!-- Replacing default-testCompile as it is treated specially by maven -->
                        <execution>
                            <id>default-testCompile</id>
                            <phase>none</phase>
                        </execution>
                        <execution>
                            <id>java-compile</id>
                            <phase>compile</phase>
                            <goals> <goal>compile</goal> </goals>
                        </execution>
                        <execution>
                            <id>java-test-compile</id>
                            <phase>test-compile</phase>
                            <goals> <goal>testCompile</goal> </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.jetbrains.kotlin</groupId>
                    <artifactId>kotlin-maven-plugin</artifactId>
                    <version>${kotlin-plugin.version}</version>
                    <configuration>
                        <args>
                            <arg>-jvm-target</arg>
                            <arg>${java.version.kotlin}</arg>
                        </args>
                    </configuration>
                    <executions>
                        <execution>
                            <id>compile</id>
                            <phase>compile</phase>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                            <configuration>
                                <sourceDirs>
                                    <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                                    <sourceDir>${vertigram.jooq.codegen.output}</sourceDir>
                                </sourceDirs>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot-maven-plugin.plugin.version}</version>
                    <configuration>
                        <mainClass>${exec.main-class}</mainClass>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>