
import org.jetbrains.dokka.DokkaConfiguration.Visibility
import org.jetbrains.dokka.gradle.DokkaTaskPartial
import java.io.ByteArrayOutputStream
import java.net.URI
import java.time.LocalDate

/*
 * This file was generated by the Gradle 'init' task.
 */


group = "ski.gagar.vertigram"

val catalogs = extensions
    .getByType<VersionCatalogsExtension>()

val libs = catalogs.named("libs")
val libsInternal = catalogs.named("libsInternal")

plugins {
    id("org.jetbrains.dokka")
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}


val dokkaSourceSetClasspath: Configuration by configurations.creating {
    description = "Declare additional DokkaSourceSet dependencies."
    isCanBeConsumed = false
    isCanBeResolved = false
}

val dokkaSourceSetClasspathResolver: Configuration by configurations.creating {
    description = "Resolves the additional DokkaSourceSet dependencies."
    extendsFrom(dokkaSourceSetClasspath)
    isCanBeConsumed = false
    isCanBeResolved = true
    isTransitive = false // be defensive, try to only add a bare minimum of additional classes to the Dokka source set.
}


dependencies {
    dokkaPlugin(libsInternal.findLibrary("dokka-versioning-plugin").get().get().toString())

    for (sub in rootProject.subprojects) {
        if (sub.name == name)
            continue
        dokkaSourceSetClasspath(project(":${sub.name}"))
    }
}

tasks.withType<DokkaTaskPartial>().configureEach {
    pluginConfiguration<org.jetbrains.dokka.base.DokkaBase, org.jetbrains.dokka.base.DokkaBaseConfiguration> {
        footerMessage = "Â© ${LocalDate.now().year} <a href=\"https://github.com/gagarski/\">Kirill Gagarski</a>"
    }
    dokkaSourceSets {
        named("main") {
            classpath.from(dokkaSourceSetClasspathResolver)
            sourceRoots.from(file("src/main/"), file("build/generated/source/kaptKotlin/main"))
            includes.from("README.md")
            suppressGeneratedFiles = false

            jdkVersion = 21

            platform.set(org.jetbrains.dokka.Platform.jvm)

            documentedVisibilities.set(setOf(
                Visibility.PUBLIC,
                Visibility.PROTECTED
            ))
            perPackageOption {
                matchingRegex.set(".*internal.*")
                suppress.set(true)
            }

            perPackageOption {
                matchingRegex.set(".*samples.*")
                suppress.set(true)
            }
            samples.from(files("src/main/kotlin/ski/gagar/vertigram/samples/Samples.kt"))
            sourceLink {
                val isSnapshot = version.toString().split("-").let { it[it.lastIndex] } == "SNAPSHOT"
                val urlVersion = if (isSnapshot) {
                    val os = ByteArrayOutputStream()
                    exec {
                        workingDir = rootDir
                        commandLine("git", "rev-parse", "--short", "HEAD")

                        standardOutput = os
                    }
                    os.toString().trim()
                } else {
                    "v${version}"
                }
                // Unix based directory relative path to the root of the project (where you execute gradle respectively).
                localDirectory.set(rootDir)

                // URL showing where the source code can be accessed through the web browser
                remoteUrl.set(URI("https://github.com/gagarski/vertigram/tree/${urlVersion}").toURL())
                // Suffix which is used to append the line number to the URL. Use #L for GitHub
                remoteLineSuffix.set("#L")
            }

            externalDocumentationLink {
                url.set(URI("https://kotlinlang.org/api/kotlinx.coroutines/").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://vertx.io/docs/${libs.findVersion("vertx").get()}/apidocs/").toURL())
            }
            val jacksonVersion = libs.findVersion("jackson").get()
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-annotations/${jacksonVersion}/").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/${jacksonVersion}/").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/${jacksonVersion}/").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/org.jooq/jooq/${libs.findVersion("jooq").get()}").toURL())
                packageListUrl.set(URI("https://javadoc.io/doc/org.jooq/jooq/${libs.findVersion("jooq").get()}/element-list").toURL())
            }
        }
    }
}
