import org.ajoberstar.grgit.Grgit
import org.jetbrains.dokka.DokkaConfiguration.Visibility
import org.jetbrains.dokka.gradle.DokkaTaskPartial
import java.net.URI
import java.net.URL
import java.time.LocalDate

/*
 * This file was generated by the Gradle 'init' task.
 */


group = "ski.gagar.vertigram"

val catalogs = extensions
    .getByType<VersionCatalogsExtension>()

val libs = catalogs.named("libs")
val libsInternal = catalogs.named("libsInternal")

plugins {
    kotlin("jvm")
    `java-library`
    `maven-publish`
    signing
    id("org.jetbrains.dokka")
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
    kotlinOptions {
        jvmTarget = "21"
    }
}

dependencies {
    testImplementation(libsInternal.findLibrary("junit-api").get().get().toString())
    testRuntimeOnly(libsInternal.findLibrary("junit-engine").get().get().toString())
    dokkaPlugin(libsInternal.findLibrary("dokka-versioning-plugin").get().get().toString())
}

tasks.withType<DokkaTaskPartial>().configureEach {
    pluginConfiguration<org.jetbrains.dokka.base.DokkaBase, org.jetbrains.dokka.base.DokkaBaseConfiguration> {
        footerMessage = "Â© ${LocalDate.now().year} <a href=\"https://github.com/gagarski/\">Kirill Gagarski</a>"
    }
    dokkaSourceSets {
        named("main") {
            sourceRoots.from(file("src/main/"), file("build/generated/source/kaptKotlin/main"))
            includes.from("Module.md")
            suppressGeneratedFiles = false

            jdkVersion = 21

            platform.set(org.jetbrains.dokka.Platform.jvm)

            documentedVisibilities.set(setOf(
                Visibility.PUBLIC,
                Visibility.PROTECTED
            ))
            perPackageOption {
                matchingRegex.set(".*internal.*")
                suppress.set(true)
            }

            perPackageOption {
                matchingRegex.set(".*samples.*")
                suppress.set(true)
            }
            samples.from(files("src/main/kotlin/ski/gagar/vertigram/samples/Samples.kt"))
            sourceLink {
                val isSnapshot = version.toString().split("-").let { it[it.lastIndex] } == "SNAPSHOT"
                val urlVersion = if (isSnapshot) {
                    val git = Grgit.open(rootDir)
                    git.head().id
                } else {
                    "v${version.toString()}"
                }
                // Unix based directory relative path to the root of the project (where you execute gradle respectively).
                localDirectory.set(rootDir)

                // URL showing where the source code can be accessed through the web browser
                remoteUrl.set(URI("https://github.com/gagarski/vertigram/tree/${urlVersion}").toURL())
                // Suffix which is used to append the line number to the URL. Use #L for GitHub
                remoteLineSuffix.set("#L")
            }

            externalDocumentationLink {
                url.set(URI("https://kotlinlang.org/api/kotlinx.coroutines/").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://vertx.io/docs/${libs.findVersion("vertx").get()}/apidocs/").toURL())
            }
            val jacksonVersion = libs.findVersion("jackson").get()
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-annotations/${jacksonVersion}/").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/${jacksonVersion}/").toURL())
                packageListUrl.set(URI("https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/${jacksonVersion}/element-list").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/${jacksonVersion}/").toURL())
            }
            externalDocumentationLink {
                url.set(URI("https://javadoc.io/doc/org.jooq/jooq/${libs.findVersion("jooq").get()}").toURL())
                packageListUrl.set(URI("https://javadoc.io/doc/org.jooq/jooq/${libs.findVersion("jooq").get()}/element-list").toURL())
            }
        }


    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType<Test> {
    useJUnitPlatform()
}



java.sourceCompatibility = JavaVersion.VERSION_21

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])

        pom {
            name.set(project.name)
            description.set(project.description)
            url.set("https://vertigram.gagar.ski/")
            licenses {
                license {
                    name.set("Apache License, Version 2.0")
                    url.set("https://opensource.org/licenses/Apache-2.0")
                }
            }
            developers {
                developer {
                    name.set("Kirill Gagarski")
                    email.set("kirill.gagarski@gmail.com")
                }
            }
            scm {
                url.set(
                    "https://github.com/gagarski/vertigram.git"
                )
                connection.set(
                    "scm:git:git://github.com/gagarski/vertigram.git"
                )
                developerConnection.set(
                    "scm:git:git://github.com/gagarski/vertigram.git"
                )
            }
            issueManagement {
                url.set("https://github.com/gagarski/vertigram/issues")
            }
        }
    }
}

signing {
    sign(publishing.publications["maven"])
}
